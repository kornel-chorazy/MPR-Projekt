package pl.edu.pjwstk.mpr.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import pl.edu.pjwstk.mpr.db.Klient;

public class DBManager {

	static Connection connection;

	static PreparedStatement insertIntoKlientStmt;
	static PreparedStatement insertIntoKredytStmt;

	/**
	 * Nawiązuje połączenie do bazy o zadanej nazwie oraz tworzy obiekty
	 * potrzebne później, podczas pracy z bazą.
	 * 
	 * @param dbName
	 *            nazwa bazy do której chcemy się połączyć
	 */
	public void connect(String kredytdb) {

		try {
			Class.forName("org.hsqldb.jdbc.JDBCDriver");
		} catch (Exception e) {
			System.err.println("ERROR: failed to load HSQLDB JDBC driver.");
			e.printStackTrace();
			return;
		}

		try {
			
			connection = DriverManager.getConnection(
					"jdbc:hsqldb:hsql://localhost/" + kredytdb, "SA", "");
			insertIntoKlientStmt = connection.prepareStatement(
					"INSERT INTO klient (imie,nazwisko,pesel,id_kredyt) VALUES (?,?,?,?)");
			insertIntoKredytStmt = connection.prepareStatement(
			"INSERT INTO kredyt (nazwa,kwota,raty) VALUES (?,?,?)");
		} catch (SQLException e) {
			System.err.println("ERROR: SQLException przy laczeniu do bazy.");
			e.printStackTrace();
		}

	}

	/**
	 * Metoda tworzy tabelę MOVIES (do przechowywania informacji o filmach)
	 * o ile taka nie istnieje.
	 */
	public static void createKlientTable() {
		try {

			// TODO sprawdzic czy tabela juz nie istnieje

			Statement stmt = connection.createStatement();
			stmt.execute("CREATE TABLE if not exists klient ("
					+"id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
					+ "imie VARCHAR(200)," + "nazwisko VARCHAR(200),"
					+ "pesel CHAR(11)," + "id_kredyt INTEGER," + ")");
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}
	public static void createKredytTable() {
		try {

			// TODO sprawdzic czy tabela juz nie istnieje

			Statement stmt = connection.createStatement();
			stmt.execute("create table if not exists kredyt ("
					+"id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
					+ "nazwa VARCHAR(200)," + "kwota VARCHAR(200),"
					+ "raty CHAR(11)," + ")");
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	/**
	 * Wstawia dane filmu do tabeli MOVIE
	 * @param movie obiekt przechowujący dane filmu do zapisania
	 */
	public void saveKlientToDB(Klient klient) {

		try {

			insertIntoKlientStmt.setString(1, klient.getImie());
			insertIntoKlientStmt.setString(2, klient.getNazwisko());
			insertIntoKlientStmt.setString(3, klient.getPesel());
			insertIntoKlientStmt.setInt(4, klient.getId_kredyt());

			insertIntoKlientStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		
		}

	}
	
	public void saveKredytToDB(Kredyt kredyt) {

		try {

			insertIntoKredytStmt.setString(1, kredyt.getNazwa());
			insertIntoKredytStmt.setString(2, kredyt.getKwota());
			insertIntoKredytStmt.setString(3, kredyt.getRaty());

			insertIntoKredytStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		
		}

	}
	
//--------------------------------------------------	
	public static  ResultSet ZapytanieTablicyKlient()
	{
		ResultSet rs=null;
		
		try{
		
		Statement stmt = connection.createStatement();
		rs =stmt.executeQuery("Select * from klient");
	
		} 
		catch (SQLException e) {
		 System.err.println("ERROR: SQLException przy laczeniu do bazy.");
		e.printStackTrace();
	}
		return rs;
	} 
	public static  ResultSet ZapytanieTablicyKredyt()
	{
		ResultSet rs=null;
		
		try{
		
		Statement stmt = connection.createStatement();
		rs =stmt.executeQuery("Select * from kredyt");
	
		} 
		catch (SQLException e) {
		 System.err.println("ERROR: SQLException przy laczeniu do bazy.");
		e.printStackTrace();
	}
		return rs;
	} 
	public static  ResultSet ZapytanieKlDoKr0()
	{
		ResultSet rs=null;
		
		try{
		
		Statement stmt = connection.createStatement();
		rs =stmt.executeQuery("select k.id, k.imie, k.nazwisko, k.pesel, k.id_kredyt, kr.id, kr.nazwa from klient k, kredyt kr where k.id_kredyt=kr.id and k.id_kredyt=0");
	
		} 
		catch (SQLException e) {
		 System.err.println("ERROR: SQLException przy laczeniu do bazy.");
		e.printStackTrace();
	}
		return rs;
	} 
	public static  ResultSet ZapytanieKlDoKr1()
	{
		ResultSet rs=null;
		
		try{
		
		Statement stmt = connection.createStatement();
		rs =stmt.executeQuery("select k.id, k.imie, k.nazwisko, k.pesel, k.id_kredyt, kr.id, kr.nazwa from klient k, kredyt kr where k.id_kredyt=kr.id and k.id_kredyt=1");
	
		} 
		catch (SQLException e) {
		 System.err.println("ERROR: SQLException przy laczeniu do bazy.");
		e.printStackTrace();
	}
		return rs;
	} 
	public static  ResultSet ZapytanieKlDoKr2()
	{
		ResultSet rs=null;
		
		try{
		
		Statement stmt = connection.createStatement();
		rs =stmt.executeQuery("select k.id, k.imie, k.nazwisko, k.pesel, k.id_kredyt, kr.id, kr.nazwa from klient k, kredyt kr where k.id_kredyt=kr.id and k.id_kredyt=2");
	
		} 
		catch (SQLException e) {
		 System.err.println("ERROR: SQLException przy laczeniu do bazy.");
		e.printStackTrace();
	}
		return rs;
	} 
	public static  ResultSet ZapytanieKlDoKr3()
	{
		ResultSet rs=null;
		
		try{
		
		Statement stmt = connection.createStatement();
		rs =stmt.executeQuery("select k.id, k.imie, k.nazwisko, k.pesel, k.id_kredyt, kr.id, kr.nazwa from klient k, kredyt kr where k.id_kredyt=kr.id and k.id_kredyt=3");
	
		} 
		catch (SQLException e) {
		 System.err.println("ERROR: SQLException przy laczeniu do bazy.");
		e.printStackTrace();
	}
		return rs;
	} 
	public static  ResultSet ZapytanieKlDoKr4()
	{
		ResultSet rs=null;
		
		try{
		
		Statement stmt = connection.createStatement();
		rs =stmt.executeQuery("select k.id, k.imie, k.nazwisko, k.pesel, k.id_kredyt, kr.id, kr.nazwa from klient k, kredyt kr where k.id_kredyt=kr.id and k.id_kredyt=4");
	
		} 
		catch (SQLException e) {
		 System.err.println("ERROR: SQLException przy laczeniu do bazy.");
		e.printStackTrace();
	}
		return rs;
	} 

}